#+OPTIONS: toc:nil ':t ":t author:nil
#+LATEX_CLASS: article

#+LATEX_HEADER: \usepackage[hyperref]{acl2020}

#+LATEX_HEADER: %include polycode.fmt
#+LATEX_HEADER: %format -* = "\rightarrowtriangle"
# alternative:                 -{\kern -1.3ex}*
#+LATEX_HEADER: %format !-> = "\rightarrow_{!}"
#+LATEX_HEADER: %format ?-> = "\rightarrow_{?}"
#+LATEX_HEADER: %format . = "."
#+LATEX_HEADER: %format \_ = "\_"
#+LATEX_HEADER: %let operator = "."
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \usepackage{url}
#+LATEX_HEADER: \usepackage{newunicodechar}
#+LATEX_HEADER: \input{newunicodedefs}

#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{latexsym}
#+LATEX_HEADER: \renewcommand{\UrlFont}{\ttfamily\small}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{shapes,arrows,positioning,fit}
#+LATEX_HEADER: \tikzstyle{block} = [draw, rectangle, minimum height=3em, minimum width=3em]
#+LATEX_HEADER: \tikzstyle{virtual} = [coordinate]

#+LATEX_HEADER: \aclfinalcopy % Uncomment this line for the final submission

#+TITLE: LDM: A Linear Dialogue Manager
#+LATEX_HEADER: \author{Vladislav Maraev$^\star$, Jean-Philippe Bernardy$^\star$ and Jonathan Ginzburg$^\dagger$\\ $^\star$Centre for Linguistic Theory and Studies in Probability (CLASP),\\ Department of Philosophy, Linguistics and Theory of Science, University of Gothenburg \\ {\tt \{vladislav.maraev,jean-philippe.bernardy\}@@gu.se} \\ $^\dagger$Laboratoire Linguistique Formelle (UMR 7110), Universit\'{e} de Paris \\ \texttt{yonatan.ginzburg@@univ-paris-diderot.fr} \\}

#+begin_abstract
For this system demonstration, we presents a modular dialog manager
comprised of the following components. At the lowest level, we have
implemented a proof-search engine based on linear logic. This engine
features unification. In this engine we have implemented a suite of
generic dialog-management rules, inspired from Ginzburg's KoS
framework, such that firing a rule correspond to an information-state
update of the agent. These generic rules can then be complemented by
domain-specific rules. We show in particular how a question-answering
agent, such as one operating an information kiosk, can be implemented.
#+end_abstract

* Introduction
A key aspect of dialogue systems is the coherence of the system’s
responses.  In this respect, a key component of a dialogue system is
the dialogue manager, which selects appropriate system actions
depending on the current state and the external context.

Two families of approaches to dialogue management can be considered:
hand-crafted dialogue strategies
cite:allen1995trains,larsson2002issue,jokinen2009constructive and
statistical modelling of dialogue
cite:rieser2011reinforcement,young2010hidden,williams2017hybrid. Frameworks
for hand-crafted strategies range from finite-state machines and
form-filling to more complex dialogue planning and logical inference
systems, such as Information State Update (ISU) cite:larsson2002issue
that we employ here. Although there has been a lot of development in
dialogue systems in recent years, only a few approaches reflect
advancements in /dialogue theory/. Our aim is to closely integrate
dialogue systems with work in theoretical semantics and pragmatics of
dialogue.

We believe that it is crucial to use formal tools which are most
appropriate for the task: one should be able to express the rules of
various genres of dialogue in a concise way, free, to any possible
extent, of irrelevant technical details.  In the view of
citet:dixon2009plans this is best done by representing the
information-state of the agents as updatable sets of
propositions. Subsets of propositions in the information state can be
treated independently, and, therefore, a suitable and flexible way to
represent updates is as propositions in linear logic.

By using well-known techniques which correspond well with the
intuition of information-state based dialogue management, we are able
to provide a fully working prototype of the components of our
framework:

1. a proof-search engine based on linear logic, modified to support
   inputs from external systems (representing inputs and outputs of
   the agent)

2. a set of rules which function as a core framework for dialogue
   management (in the style of KoS cite:ginzburg2012interactive)

3. several examples which use the above to construct potential
   applications of the system.

* Linear logic as a Dialogue Management Framework
Typically, and in particular in the archetypal logic programming
language prolog cite:bratko2001prolog, axioms and rules are expressed
within the general framework of first order logic. However, several
authors cite:dixon2009plans,martens2015programming have proposed to
use linear logic cite:girard1995linear instead. For our purpose, the
crucial feature of linear logic is that hypotheses may be used /only
once/. 

# For example, one could have a rule |IsAt x Gotaplatsen y ⊸ IsAt
# x CentralStationen (y+0.75)|. Consequently, after firing the above
# rule, the premiss |(Is x Gotaplatsen y)| becomes unavailable for any
# other rule.  Thereby the linear arrow |⊸| can be used to conveniently
# model that a bus cannot be at two places simultaneously.

In general, the linear arrow corresponds to /destructive state
updates/. Thus, the hypotheses available for proof search correspond
to the /state/ of the system. In our application they will correspond
to the /information state/ of the dialogue participant.

This way, firing a linear rule corresponds to triggering an /action/ of an
agent, and a complete proof corresponds to a /scenario/, i.e. a sequence
of actions, possibly involving action from several agents.  However,
the information state (typically in the literature and in this paper
as well), corresponds to the state of a /single/ agent. Thus, a scenario
is conceived as a sequence of actions and updates of the information
state of a single agent $a$, even though such actions can be
attributed to any other dialogue participant $b$. (That is, they are
$a$'s representation of actions of $b$.)  Scenarios can be realised as
a sequence of actual actions and updates. That is, an action can
result in sending a message to the outside world (in the form of
speech, movement, etc.). Conversely, events happening in the outside
world can result in updates of the information state (through a model
of the perceptory subsystem).

In our implementation, we treat the information state as a multiset of
/linear hypotheses/ that can be queried. Because they are linear, these
hypotheses can also be removed from the state.  In particular, we have
a fixed set of rules (they remain available even after being
used). Each such rule manipulates a part of the information state
(captured by its premisses) and leaves everything else in the state
alone.

# It is important to note that we will not forego the unrestricted
# (i.e. non-linear) implication (|->|). Rather, both implications will
# co-exist in our implementation, thus we can represent simultaneously
# transient facts, or states, (introduced by the linear arrow) and
# immutable facts (introduced by the unrestricted arrow).


Our DM models the information-state of only one
participant. Regardless, this participant can record its own beliefs
about the state of other participants.In general, the core of DM is
comprised of a set of linear-logic rules which depend on the domain of
application. However, many rules will be domain-independent (such as
generic processing of answers). We show these generic rules here, and
the demo will illustrate them within an example application.

*Integrating moves from NLU and NLG*:
#+BEGIN_code
hearAndRemember  :
  (m : DP -> DP -> Move) ->
  (x y : DP) -> (ms : List Move) ->
  Heard (m x y) ⊸ 
  Moves ms ⊸ HasTurn x ⊸
  [  _ :: Moves (Cons (m x y) ms); 
     _ :: Pending (m x y) ; 
     _ :: HasTurn y ];

utterAndRemember :
  (m : DP -> DP -> Move) ->
  (ms : List Move) -> (x y : DP) ->
  Agenda (m x y)  ⊸ Moves ms ⊸
  HasTurn x ⊸
  [  _ :: Utter (m x y);
     _ :: Moves (Cons (m x y) ms); 
     _ :: HasTurn y];

pushQUD :
  (q : Question) -> (qs : List Question) ->
  (x y : DP) -> Pending (Ask q x y) ⊸
  QUD qs ⊸ QUD (Cons q qs)
#+END_code

*Basic adjacency:*
#+BEGIN_code
counterGreeting :
  (x y : DP) -> HasTurn x -*
  Pending (Greet y x)  ⊸
  Agenda (CounterGreet x y);
#+END_code

*Processing user replies:*
#+BEGIN_code
processAssert :
  (a : Type) -> (x : a) -> (p : Prop)    -> 
  (qs : List Question) -> (dp dp1 : DP)  ->
  Pending (Assert p dp1 dp)              ⊸ 
  QUD  (Cons (Question dp a x p) qs)     ⊸
       [  _ :: UserFact p; _ :: QUD qs];

processShort :
  (a : Type) -> (x : a) ->  (p : Prop)   -> 
  (qs : List Question) -> (dp dp1 : DP)  ->
  Pending (ShortAnswer a x dp1 dp)       ⊸ 
  QUD  (Cons (Question dp a x p) qs)     ⊸ 
       [  _ :: UserFact p; _ :: QUD qs];
#+END_code

*Answering or clarifying*:
#+BEGIN_code
produceAnswer :
   (a : Type) -> (x : a) !-> (p : Prop) ->
   (qs : List Question) ->	
   QUD (Cons (Question U a x p) qs) ⊸
   p  -*
   [  _ :: Agenda (ShortAnswer a x S U);
      _ :: QUD qs;
      _ :: Answered (Question U a x p)];

produceCR :
[  a : Type ; x : a ;  p : Prop ;
   qs : List Question ;
   _  :: QUD (Cons (Question U a x p) qs) ;
   _  :: p ] ?-> CR;
#+END_code

bibliography:../TAL/tal.bib
\bibliographystyle{acl_natbib}

* COMMENT references
bibliography:../TAL/tal.bib

* COMMENT demo

          *LDM: A LINEAR DIALOGUE MANAGER*

Vladislav Maraev        (University of Gothenburg)
Jean-Philippe Bernardy  (University of Gothenburg)
Jonathan Ginzburg       (Université de Paris)

※   modular system with ~domain-general rules~

※   dialogue manager that goes hand in hand
     with the theory (~KoS~)

※   rich information state, ~ISU approach~

※   a proof-search engine based on ~linear logic~





- logical representation of semantic representations
- I will show you the internal representation of the information state
  of the system, as it evolves over time
- "we have shown how the information state is represented as a
  (multi)set of propositions" and how state updates are linear-logic
  function types















1. a proof-search engine based on linear logic, modified to support
   inputs from external systems (representing inputs and outputs of
   the agent)

2. a set of rules which function as a core framework for dialogue
   management (in the style of KoS cite:ginzburg2012interactive)

3. several examples which use the above to construct potential
   applications of the system.











- demo
  - show dialogue
  - show the applied rules, mention that only one rule is specific -> so
    answering can be done in a generic way
  - show the state, rich IS, ISU
  - adjacency
  - unification

