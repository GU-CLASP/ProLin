

-- hardcoding user moves.
noQud :: QUD Nil;
start :: Heard (Greet USER SYSTEM);
q1    : (t : Time) -> (n : Bus) -> (d : Location) ->
        Utter (CounterGreet SYSTEM USER) -o 
	Heard (Ask (Question USER Time t (TT n t Gotaplatsen d)) USER SYSTEM);

-- knowledge base 1 (no CR)
kb1  :: TT B18 T15   Gotaplatsen     Johanneberg ;
-- kb2  :: TT B55 T15   Gotaplatsen     SciencePark ; --(optional)
--- (...some problem?)


-- kb 2 (destination- or bus-CR)
-- kb1  :: TT B18 T15   Gotaplatsen     Johanneberg ;
kb3  :: TT B55 T20   Gotaplatsen     SciencePark ;

-- kb3  :: TT B55 T30  CentralStation  SciencePark ;


ready :: HasTurn USER;
noMoves :: Moves Nil;

-- HasTurn :: DP -> Prop
-- HasTurn x means that x is expected to speak next.

greeting : (x y : DP) ->
           HasTurn x -o
           WishToOpenDialogueWith y -o
           Agenda Nil -o
           [_ :: Agenda (Greet x y)
           ];

counterGreeting : (x y : DP) -> 
                  HasTurn x -*
                  Pending (Greet y x)  -o
                  [_ :: Agenda (CounterGreet x y)];

-- askExample :(x y : DP) ->
--             (q : Question) ->
--                   HasTurn x -o
--                   AnyGivenCondition -o
--                   [_ :: Agenda (Ask q);
--                    _ :: Asked q
--                   ];

-- greetIsSwitching :: SwitchingMove Greet;
-- cgreetIsSwitching :: SwitchingMove CounterGreet;

-- pushMove : (m : Move) -> (ms : List Move) -> PushMove m -o Moves ms -o Moves (Cons m ms);

utterAndRemember :
  (m : DP -> DP -> Move) ->
  (ms : List Move) ->
  (x y : DP) ->
  Agenda (m x y) -o
  Moves ms -o
  -- SwitchingMove m -*
  HasTurn x -o
  [_ :: Utter (m x y);
   _ :: Moves (Cons (m x y) ms);
   _ :: HasTurn y];

hearAndRemember  :
  (m : DP -> DP -> Move) ->
  (x y : DP) ->
  (ms : List Move) ->
  Heard (m x y) -o
  Moves ms -o
  -- SwitchingMove m -*
  HasTurn x       -o
  [_ :: Moves (Cons (m x y) ms);
   _ :: Pending (m x y) ;
   _ :: HasTurn y ];

-- utterAndRemember2 :   (m : DP -> DP -> Move) ->
-- (x y : DP) -> Agenda m -o NotSwitchingMove m -* Adressee y  -* [ _ :: Utter (m x y) ; _ :: LatestMove (m x y) ];
-- hearAndRemember2  :   (m : DP -> DP -> Move) ->
-- (x y : DP) -> Heard m -o NotSwitchingMove m -* Adressee y  -* [                      _ :: LatestMove (m y x) ];

processShort : (a : Type) -> (x : a) ->  (p : Prop) ->
  (qs : List Question) -> (dp : DP) ->
  Pending (ShortAnswer x a) -o QUD (Cons (Question dp x a p) qs) -o p;

pushQUD :
   (q : Question) -> (qs : List Question) ->
   (x y : DP) -> 
   Pending (Ask q x y) -o QUD qs -o 
   [_ :: QUD (Cons q qs)
   ; _ :: PendingQuestion
   ];

-- pushQUD2 : (q : Question) -> (qs : List Question) -> PushQUD q -o
--    QUD qs -o QUD (Cons q qs);

produceAnswer :
   (a : Type) ->
   (x : a) !->
   (p : Prop) ->
   (qs : List Question) ->	
   QUD (Cons (Question USER a x p) qs) -o
   p -*
   [_ :: Agenda (ShortAnswer x a SYSTEM USER); -- FIXME!!!
    _ :: QUD qs;
    _ :: Answered (Question USER a x p)];

produceCR :
   [a : Type
   ;x : a
   ;p : Prop
   ;qs : List Question
   ;_ :: QUD (Cons (Question USER a x p) qs)
   ;_ :: p
   ] ?->
   PendingQuestion -o
   CR;

specificCR :
  (t : Time) -> (n : Bus) -> (s d : Location) ->
  (qs : List Question) ->
  CR -o
  QUD (Cons (Question USER Time t  (TT n  t  s           d))  qs) -o
  QUD (Cons (Question SYSTEM Bus n (WhichBus n)) 
            (Cons (Question USER Time t (TT n t s d) qs))); 

johnParis :: Live John Paris;
