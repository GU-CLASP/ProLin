

-- hardcoding user moves.
noQud :: QUD Nil;
start :: Heard (Greet USER SYSTEM);
q1    : (x : Location) ->
        Utter (CounterGreet SYSTEM USER) -o Heard (Ask (Q Location x (Live John x)) USER SYSTEM);



ready :: HasTurn USER;
noMoves :: Moves Nil;

-- HasTurn :: DP -> Prop
-- HasTurn x means that x is expected to speak next.

greeting : (x y : DP) ->
           HasTurn x -o
           WishToOpenDialogueWith y -o
           [_ :: Agenda Greet
           ];

counterGreeting : (x y : DP) -> (ms : List Move) ->
                  HasTurn x -*
                  Moves (Cons (Greet y x) ms)  -*
                  Agenda Nil -o
                  -- Agenda m !-o
                  [_ :: Agenda (CounterGreet x y)];

askExample :(x y : DP) ->
            (q : Question) ->
                  HasTurn x -o
                  AnyGivenCondition -o
                  [_ :: Agenda (Ask q);
                   _ :: Asked q
                  ];

-- greetIsSwitching :: SwitchingMove Greet;
-- cgreetIsSwitching :: SwitchingMove CounterGreet;

pushMove : (m : Move) -> (ms : List Move) -> PushMove m -o Moves ms -o Moves (Cons m ms);

utterAndRemember :
  (m : DP -> DP -> Move) ->
  (x y : DP) ->
  Agenda (m x y) -o
  -- SwitchingMove m -*
  HasTurn x -o [ _ :: Utter (m x y) ; _ :: PushMove (m x y) ; _ :: HasTurn y ];

hearAndRemember  :
  (m : DP -> DP -> Move) ->
  (x y : DP) ->
  Heard (m x y) -o
  -- SwitchingMove m -*
  HasTurn x       -o
  [_ :: PushMove (m x y) ;
   _ :: HasTurn y ;
   _ :: Agenda Nil];

utterAndRemember2 :   (m : DP -> DP -> Move) ->
(x y : DP) -> Agenda m -o NotSwitchingMove m -* Adressee y  -* [ _ :: Utter (m x y) ; _ :: LatestMove (m x y) ];
hearAndRemember2  :   (m : DP -> DP -> Move) ->
(x y : DP) -> Heard m -o NotSwitchingMove m -* Adressee y  -* [                      _ :: LatestMove (m y x) ];

processShort : (a : Type) -> (x : a) ->  (p : Prop) -> LatestMove (ShortAnswer x a) -o Asked (Q x a p) -o p;

getQUD : (ms : List Move) -> (q : Question) -> (x y : DP) -> Moves (Cons (Ask q x y) ms) -* QUD Nil -o QUD q;

produceAnswer : (a : Type) -> (x : a) !-> (p : Prop) -> QUD (Q a x p) -o p -*
   [_ :: Agenda (ShortAnswer x a);
    _ :: Answered (Q a x p)];

johnParis :: Live John Paris;
