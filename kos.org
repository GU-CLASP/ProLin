* Typing considerations
** FACTS
- Kos ::
- ProLinKos ::
  - A fact is something that was agreed upon.
  - In our logic, we represent facts as propositions which have a
    proof. For this to work need that we have a proof exactly when the
    participants agree on a proposition.

    This requires in particular that the participants pre-agree on the
    rules of the logic! Indeed, Let us assume that we have
    1. p : A -> B
    2. q : A

    Then we also have p(q) : B. Therefore, according to our defintion,
    p(q) is witnessing that the participants agreed on B, even though
    they never needed to discuss that (they only discussed A and A ->
    B). (ACCORDING TO TTR! But perhaps we don't need this for ProLin,
    because the unification isn't creating that complicated proofs.)

** Propositions
- Kos ::
  - Prop = [sit : Record; sit-type : RecordType]
  - propostion p=[sit = s0, sit-type = ST0] is true iff s0 : ST0

- ProLinKos ::
  - Prop = Prop
  - A proposition A : Prop is agreed upon iff. there is a proof t of type A.
** Questions
- Kos :: function that maps a record into a proposition (e.g. 3.39)
- ProLinKos :: follows AixDial
  We have a constructor:
  1. Question :: Type
  2. Q :: (A : Type) -> (P : A -> Prop) -> Question
  Or even better
  1. Question = [A :: Type; P :: A -> Prop]
  2. Example: whereDoYouLive = [A = City, P = λx. live_in(x,you)] (, means "where do you live?")

** Answers
- Kos :: ?
- ProLinKos :: follows AixDial
  For an answer of (Q A P) we need two things: a:A and p : P (a).
  1. Answer = [ q :: Question; a :: q.A; p :: q.P a]
  2. Example = [q = whereDoYouLive, a = Paris; p = ... proof ... ; ]
** QUD
- Kos :: questions with a special order (‘conversational precedency’,
  MaxQUD) and potentially co-dependent
- ProLinKos ::
  We currently have at most one QUD. If we wanted many, we'd like to
  have some dependencies between them. One way is to make the QUD
  dependend on some proposition being a fact or not.

  So, QUD :: Prop -> Question -> Type.

  Example:
  1. QUD True (Q Bool (\x -> if x then NeedReturnFlight else NoNeedReturnFlight)
  2. QUD NeedReturnFlight whenDoYouWantToComeBack
     - whenDoYouWantToComeBack = Q Date (\x -> wantToComeBack(you,x))
 
       
** MOVES (and LATEST-MOVE)
- Kos :: locutionary propostions: proposition + linguistic sign (speech act?)
- ProLinKos ::
  #+BEGIN_EXAMPLE
  Move :: Type
  Ask :: Question -> Move
  Assert :: Prop -> Move
  AnswerMove :: Answer -> Move
  #+END_EXAMPLE

* Conversational rules
** Turn-taking (4.21)
it seems that this can be encoded in other rules
*** no turn change
*** turn-change
*** turnholder-underspecified
** Greeting and parting (4.20, 4.22, 4.25, 4.26)
*** greeting
*** countergreeting
*** parting
*** counterparting
*** disengaging
** Asking, asserting, answering, accepting
*** Free speech
*** Asking
**** Kos
#+begin_example
LatestMove.Cont = Ask(A,q): IllocProp
1. A: push q onto QUD; release turn
2. B: push q onto QUD; take turn; make q-specific–utterance
#+end_example
A and B might have different sets of QUDs
**** ProLinKos
#+BEGIN_EXAMPLE
qudPush : HaveTurn -o NextMove (Ask q) -o [c1 :: QUD (Q a x); _ : Utter(Ask q)];
hearQuestion : Hear (Ask q) -o [c1 :: QUD q; _ : HaveTurn];
produceAnswer : HaveTurn -o (a : Type) -> (answer:a) -> (q:a->Prop) -> (proof:q answer)
   -o QUD (Q a q) -o [_ :: Utter (Answer (Q a p) answer proof)];
#+END_EXAMPLE

*** Asserting
**** Kos
#+begin_example
1. LatestMove.Cont = Assert(A, p): IllocProp
2. A: push p? onto QUD, release turn
3. B: push p? onto QUD, take turn; Option 1: Discuss p?,
   Option 2: Accept p
#+end_example
*** Assertion checking and confirming
*** Answering?
*** Accepting 
**** Kos
#+begin_example
1. LatestMove.Cont = Accept(B,p) : IllocProp
2. B: increment FACTS with p; pop p? from QUD;
3. A: increment FACTS with p; pop p? from QUD;
#+end_example
*** Fact update / QUD downdate
** Grounding and CRification
** NSUs
* Would be nice to test/implement
- Presuppositions (given that X / since we know that X). X should be added into facts. 
- Question accomodation (A: when? B: as cheap as possible). ?x.cheapest(x) should be added to QUD. 
- Enthymemes (A: why? B: because it is (...) )

