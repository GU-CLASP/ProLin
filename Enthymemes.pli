-- hardcoding user moves.
-- start :: Heard (Greet USER SYSTEM);
-- q1    : (t : Time) -> (n : Bus) -> (d : Location) ->
--         Utter (CounterGreet SYSTEM USER) -o 
-- 	Heard (Ask (Question USER Time t (TT n t Gotaplatsen d)) USER SYSTEM);

-- q2a : (n0 : Bus) -> Utter (Ask (Question SYSTEM Bus n0 (WantBus n0)) SYSTEM USER) -o
--      Heard ((ShortAnswer Bus B55) USER SYSTEM);

-- q2b : (n0 : Bus) -> Utter (Ask (Question SYSTEM Bus n0 (WantBus n0)) SYSTEM USER) -o
--      Heard (Assert (WantBus B55) USER SYSTEM);


_ :: Start;
start : (m : Fun) -> Start -o
      [_ :: Heard (Ask (Question BOB Fun m (m DoctorAtHome)) BOB ALICE);
       _ :: Heard (Request (Question BOB Fun m (m GetHelp)) BOB ALICE);
       _ :: Heard (Request (Question BOB Fun m (m HaveAffair)) BOB ALICE);]

-- why :  (r : Road) -> (t : Topos) -> Utter (Assert (Pick (Route r Home)) SYSTEM USER) -o Heard (Ask (Question USER Reason t (Topos t)) USER SYSTEM);
-- whyShort :  (r : Road) -> (t : Topos) -> Utter (ShortAnswer Road Bypass SYSTEM USER) -o Heard (Ask (Question USER Reason t (Topos t)) USER SYSTEM);


-- initial state
ready :: HasTurn BOB;
noMoves :: Moves Nil;
noQud :: QUD Nil;
noEud :: EUD Nil;


utterAndRemember :
  (m : DP -> DP -> Move) ->
  (ms : List Move) ->
  (x y : DP) ->
  Agenda (m x y) -o
  Moves ms -o
  HasTurn x -o
  [_ :: Utter (m x y);
   _ :: Moves (Cons (m x y) ms);
   _ :: HasTurn y];

hearAndRemember  :
  (m : DP -> DP -> Move) ->
  (x y : DP) ->
  (ms : List Move) ->
  Heard (m x y) -o
  Moves ms -o
  HasTurn x       -o
  [_ :: Moves (Cons (m x y) ms);
   _ :: Pending (m x y) ;
   _ :: HasTurn y ];

greeting : (x y : DP) ->
           HasTurn x -o
           WishToOpenDialogueWith y -o
           Agenda Nil -o
           [_ :: Agenda (Greet x y)
           ];

counterGreeting : (x y : DP) -> 
                  HasTurn x -*
                  Pending (Greet y x)  -o
                  [_ :: Agenda (CounterGreet x y)];

processShort : (a : Type) -> (x : a) ->  (p : Prop) -> 
  (qs : List Question) -> (dp dp1 : DP) ->
  Pending (ShortAnswer a x dp1 dp) -o QUD (Cons (Question dp a x p) qs) -o
  [ _ :: UserFact p;
    _ :: QUD qs];

processAssert : (a : Type) -> (x : a) ->  (p : Prop) -> 
  (qs : List Question) -> (dp dp1 : DP) ->
  Pending (Assert p dp1 dp) -o QUD (Cons (Question dp a x p) qs) -o
  [ _ :: UserFact p;
    _ :: QUD qs];

-- JG2012: (4.30)
pushQUD :
   (q : Question) -> (qs : List Question) ->
   (x y : DP) -> 
   Pending (Ask q x y) -o QUD qs -o 
   [_ :: QUD (Cons q qs)
   ];

pushRUD :
   (q : Question) -> (qs : List Question) ->
   (x y : DP) -> 
   Pending (Request q x y) -o RUD qs -o 
   [_ :: RUD (Cons q qs)
   ];

produceAnswer :
   (a : Type) ->
   (x : a) ->
   (p : Prop) ->
   (qs : List Question) ->	
   QUD (Cons (Question USER a x p) qs) -o
   p -*
   [_ :: Agenda (Assert p SYSTEM USER);
    _ :: QUD qs;
    _ :: Answered (Question USER a x p)];

produceAnswerShort :
   (a : Type) ->
   (x : a) ->
   (p : Prop) ->
   (qs : List Question) ->	
   QUD (Cons (Question USER a x p) qs) -o
   p -*
   [_ :: Agenda (ShortAnswer a x SYSTEM USER);
    _ :: QUD qs;
    _ :: Answered (Question USER a x p)];

-- produceAnswerBecause :
--    (a : Type) ->
--    (x : a) ->
--    (p : Prop) ->
--    (r : Reason) ->
--    (qs : List Question) ->
--    (es : List Enthymeme) ->
--    (d : EnthymemeDomain) -> 
--    QUD (Cons (Question USER a x (Why p r)) qs) -o
--    EUD es -o
--    (Why p r) -* 
--    Enthymeme r d -*
--    [_ :: Agenda (ShortAnswer a x SYSTEM USER);
--     _ :: QUD qs;
--     _ :: Answered (Question USER a x p);
--     _ :: EUD (Cons (Enthymeme r d) es)];


-- produceCR :
--    [a : Type
--    ;x : a
--    ;p : Prop
--    ;qs : List Question
--    ;_ :: QUD (Cons (Question USER a x p) qs)
--    ;_ :: p
--    ] ?->
--    CR;

-- === DOMAIN KNOWLEDGE ===

-- knowledge base	
-- d1 :: Route Bypass Home;
-- d2 :: Route ParkLane Home;
-- d3 :: Route BridgeRoute Home;
-- r1 :: Shortest (Route Bypass Home) ;
-- r2 :: Cheapest (Route ParkLane Home) ;
-- r3 :: Prettiest (Route BridgeRoute Home);

toposCantHelp : (qs : List Question) ->
  RUD (Cons (Question DP Fun m m(CanHelp Doctor)) qs) -*
  Not (AtHome Doctor) -*
   [
    _ :: Not  (CanHelp Doctor); 
    ];

toposCantHelp : (qs : List Question) ->
   RUD (Cons (Question DP Fun m (m (CanHelp Doctor))) qs) -*
   AtHome Doctor -*
   [
    _ :: CanHelp Doctor; 
    ];

toposAffair : (qs : List Question) ->
   RUD (Cons (Question DP Fun m (m Affair)) qs) -*
   Not (AtHome Doctor) -*
   [
    _ :: HaveAffair 
    ];

produceConfirm : 
   (a : Type) ->
   (x : a) ->
   (p : Prop) ->
   (qs : List Question) ->	
   RUD (Cons (Question DP a x p) qs) -o
   p -*
   [_ :: Agenda (Confirm p SYSTEM USER);
    _ :: RUD qs;
    _ :: Confirmed (Question USER a x p)];

produceReject : 
   (a : Type) ->
   (x : a) ->
   (p : Prop) ->
   (qs : List Question) ->	
   RUD (Cons (Question DP a x p) qs) -o
   Not p -*
   [_ :: Agenda (Reject p SYSTEM USER);
    _ :: RUD qs;
    _ :: Confirmed (Question USER a x p)];

-- toposPrettiest : (x: Road) -> (y: To) -> (qs : List Question) ->
--    QUD (Cons (Question USER Road x (PickRoute x Home)) qs) -* --- x:Road.pickroute(x, Home)
--    Route x y -o
--    Prettiest x   -*
--    [_ :: PickRoute x y;
--     _ :: Topos x Prettiest;    -- (topos)
--     _ :: Enthymeme Prettiest (PickRoute x y);  -- enthymeme (for x)
--     ];


specificCR :
  (t : Time) -> (n : Bus) -> (s d : Location) ->
  (qs : List Question) ->
  CR -o
  QUD (Cons (Question USER Time t  (TT n  t  s           d))  qs) -o
  [_ :: QUD (Cons (Question SYSTEM Bus n (WantBus n)) 
            (Cons (Question USER Time t (TT n t s d)) qs));
   _ :: Agenda (Ask (Question SYSTEM Bus n (WantBus n)) SYSTEM USER) ];
   

-- COVERAGE

-- B> Is the doctor at home?	[= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m HaveAffair))]
-- A> No.			[= ShortAnswer Fun λm.Not m]
-- A> Come right in.		[= ShortAnswer Fun λm.m] or [= Accept HaveAffair]

-- B> Is the doctor at home?	[= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m HaveAffair)) & Request (Q Fun m (m DoctorsHelp))]
-- A> No.			[= ShortAnswer Fun λm.Not m]
-- A> So he can't help you.	[= Assert (Not DoctorsHelp)] or [= Reject DoctorsHelp]
-- A> Come right in.		[= ShortAnswer Fun λm.m] or [= Accept HaveAffair]

-- B> Is the doctor at home?	[= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m DoctorsHelp))]
-- A> Yes.			[= ShortAnswer Fun λm.m]
-- A> Come right in.		[= ShortAnswer Fun λm.m] or [= Accept DoctorsHelp]

-- B> Is the doctor at home?    [= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m DoctorsHelp))]
-- A> Come right in.            [= ShortAnswer Fun λm.m] or [= Accept DoctorsHelp] 

-- B> Is the doctor at home?		[= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m DoctorsHelp)) & Request (Q Fun m (m HaveAffair))]
-- A> No.				[= ShortAnswer Fun λm.m]
-- A> So he can't help you.		[= Assert (Not DoctorsHelp)] or [= Reject DoctorsHelp]
-- A> And we are not having an affair.	[= Assert (Not HaveAffair)] or [= Reject HaveAffair]

-- B> Is the doctor at home?		[= Ask (Q Fun m (m DoctorAtHome)) & Request (Q Fun m (m DoctorsHelp))]
-- A> Yes				[= ShortAnswer Fun λm.m]
-- A> but (!) he can't help you.	[= Assert (Not DoctorsHelp)] or [= Reject DoctorsHelp]
